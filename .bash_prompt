# @gf3’s Sexy Bash Prompt, inspired by “Extravagant Zsh Prompt”
# Shamelessly copied from https://github.com/gf3/dotfiles
# Screenshot: http://i.imgur.com/s0Blh.png

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM=xterm-256color
fi

if tput setaf 1 &> /dev/null; then
  tput sgr0
  if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
    MAGENTA=$(tput setaf 9)
    ORANGE=$(tput setaf 172)
    GREEN=$(tput setaf 190)
    PURPLE=$(tput setaf 141)
    WHITE=$(tput setaf 256)
  else
    MAGENTA=$(tput setaf 5)
    ORANGE=$(tput setaf 4)
    GREEN=$(tput setaf 2)
    PURPLE=$(tput setaf 1)
    WHITE=$(tput setaf 7)
  fi
  BOLD=$(tput bold)
  RESET=$(tput sgr0)
else
  MAGENTA="\033[1;31m"
  ORANGE="\033[1;33m"
  GREEN="\033[1;32m"
  PURPLE="\033[1;35m"
  WHITE="\033[1;37m"
  BOLD=""
  RESET="\033[m"
fi

export MAGENTA
export ORANGE
export GREEN
export PURPLE
export WHITE
export BOLD
export RESET

function is_git_repo() {
  [[ -n $(git branch 2> /dev/null) ]]
}

function parse_git_warnings() {
  local GIT_WARNINGS=''
  local GIT_STATUS=$(git status 2>/dev/null)

  echo $GIT_STATUS | grep "nothing to commit" >/dev/null 2>&1
  if [ "$?" -ne "0" ]; then
    GIT_WARNINGS=${GIT_WARNINGS}" #"
  fi

  echo $GIT_STATUS | grep "Unmerged paths" > /dev/null 2>&1
  if [ "$?" -eq "0" ]; then
    GIT_WARNINGS=${GIT_WARNINGS}" | MERGING"
  fi

  git config user.email | grep "@" > /dev/null 2>&1
  if [ "$?" -ne "0" ]; then
    GIT_WARNINGS=${GIT_WARNINGS}" !!! NO EMAIL SET !!!"
  fi

  if [ "$GIT_WARNINGS" != "" ]; then
    echo $GIT_WARNINGS
  fi
}

function parse_git_branch() {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/${WHITE} | ${PURPLE}on \1 $(parse_git_warnings)/"
}

function is_hg_repo() {
  [[ -n $(hg branch 2> /dev/null) ]]
}

function parse_hg_dirty() {
  [[ $(hg status 2> /dev/null | wc -l) -ne 0 ]] && echo "*"
}

function parse_hg_branch() {
  echo "${WHITE} | ${ORANGE}on $(hg branch 2> /dev/null)$(parse_hg_dirty)"
}

function display_repo_info {
  is_git_repo && parse_git_branch
  is_hg_repo && parse_hg_branch
}

PS1="\[$PURPLE\]\t \d \[$WHITE\]| \[$GREEN\]\w\$(display_repo_info)\n\[${BOLD}${MAGENTA}\]\u\[$WHITE\]@\[$ORANGE\]\h\n\[$WHITE\]\$ \[$RESET\]"


